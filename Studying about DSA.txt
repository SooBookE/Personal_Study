/* 20231226 */

[[ DSA ( Data Structures and Algorithms ) ]] - References : geeksforgeeks.org

개요 :  DSA( Data Structures and Algorithms )는 완벽히 분류 되어 있지만,
        서로 연관성이 있는 두 토픽인 자료 구조( Data Structures )와 알고리즘( Algorithms )을 일컫습니다.
        DSA는 CS를 배우는 사람들이 필수적으로 익혀야 하는 가장 중요한 요소입니다.

자료 구조 : 데이터를 효율적이고 효과적이게 쓸 수 있도록, 기기에 데이터의 적재와 분류하는 방식을 지칭합니다.
            시간 복잡도와 공간 복잡도를 최소화 하는 것을 자료 구조 사용 전에 선행해야합니다.

알고리즘 :  특정 상황의 문제 해결이나, 계산 등에 사용되는 절차 혹은 잘 정의된 구조들의 집합입니다.
            특정 업무를 해결하는 절차들의 집합이라고 생각하면 되겠습니다.

[[ 학습 과정 ]]

1. 시간 복잡도, 공간 복잡도에 관해 학습한다.
2. 기본 자료 구조를 학습한다.
3. 기본 알고리즘을 학습한다.
4. DSA 문제 풀이를 연습한다.

====================================================================================================

[[ 1. 복잡도 학습하기 ]]

DSA의 발발의 주요 계기인 효율적이고 효과적인 문제 해결을 위해, "시간 복잡도"와 "공간 복잡도"의 개념이 생겼습니다.

1. 시간 복잡도 : 코드 수행에 필요한 시간의 총량을 측정하기 위해 사용합니다.
2. 공간 복잡도 : 코드의 기능들을 성공적으로 수행하기 위해 필요한 공간들의 총량을 지칭합니다.
                또한, 자료 구조 외의 작업 수행에 사용되는 보조 공간( Auxiliary Space )이라는
                용어도 기억해야 할 요소입니다.

이에 더해, 코드 수행에 필요한 시간은 다음과 같은 몇몇 요소들에 의해 좌우됩니다.
 • 프로그램 내에서 실행 되는 작업의 수.
 • 장치의 처리 속도.
 • 데이터 전달 속도.( ex. 온라인 플랫폼에서 코드 수행 등의 상황 )

이런 사항들과 무관하게 효율성을 측정하기 위해, "점근 표기법( Asymptotic Notation )"을 사용합니다.

점근 표기법( Asymptotic Notation )은 코드 수행이 필요하지 않고, 입력 크기에 따른 필요 시간을
측정하는 수학적인 도구입니다.
시스템 의존적인 상수와 관계 없이, 전체 프로그램에서 수행되는 모듈 작업의 개수와 연관성을 가집니다.

다음의 세 가지의 점근 표기법이 대표적으로 사용됩니다.
 • Big O Notation( O ) - 최악의 케이스를 설명할 때 사용합니다.
 • Omega Notation( Ω ) - 최상의 케이스를 설명할 때 사용합니다.
 • Theta Notation( θ ) - 알고리즘의 평균 복잡도를 설명할 때 사용합니다.

/* 20231228 */

코드 분석에서 가장 많이 사용되는 표기법은 Big-O 표기법으로, "코드 실행 시간"이나 "입력 크기에 따라
사용되는 메모리 양"의 상한성을 제시합니다.

----------------------------------------------------------------------------------------------------
        [Big-O 표기법]
        Big-O 표기법을 통해, 알고리즘의 복잡성을 표기 할 수 있습니다.
        
        크기가 N일 때 :
                • 상수 시간이 소요되는 함수 혹은 작업은 차수가 "1"입니다. : O(1)
                • 선형적으로 시간이 소요되는 함수 혹은 작업은 차수가 "N"입니다. : O(N)
                • 2차 함수 형태로 시간이 소요되는 함수 혹은 작업은 차수가 "N^2"입니다. : O(N^2)
        
        정의 :  자연수 집합의 함수 g와 f가 있습니다.
                모든 n>=n0에 대해 f(n)<=cg(n)인 양수인 상수 c와 자연수 n0가 존재하면,
                함수 f는 O(g)라고 정의합니다.
        
        참고 : O(g)는 집합입니다.

        f(n)=O(g(n))
        는
        f(n)∈O(g(n))
        를 의미하지 않습니다.

        Big-O 표기법으로 런타임 분석 시의 일반적인 절차는 다음과 같습니다.
                1. 입력이 무엇인지, n이 무엇을 나타내는지 탐색하기.
                2. 최대 작업 수를 표현하면 알고리즘은 n의 관점에서 수행됩니다.
                3. 최고차항을 제외하고 모두 제거합니다.
                4. 모든 상수 요소를 제거합니다.


/* 20231230 */

        Big-O 표기법 분석의 유용한 속성 몇 가지는 다음과 같습니다.
                상수 곱셈 : f(n) = c*g(n)이면, O(f(n))=O(g(n))
                                단, c는 0이 아닌 상수.
        
        자세한 건 나중에 알아보자 ^^;
----------------------------------------------------------------------------------------------------

[[ 2. 데이터 구조 배우기 ]]

DSA의 주제는 두 부분으로 구성됩니다.

• 데이터 구조
• 알고리즘

서로 다르지만, 밀접하게 연관 되어 있는 주제이므로, 올바른 순서로 학습하는게 중요합니다.

데이터 구조를 먼저 학습한 다음, 해당 데이터 구조에서 사용되는 관련성과 중요도가 높은
알고리즘을 학습하도록 하겠습니다.



1. 배열

가장 기본적이고, 중요한 데이터 구조입니다. 선형 구조이며, 요소에 연속적으로 메모리를 할당하는
동종 데이터의 모음입니다. 연속적인 메모리 할당 구조이므로, 일정 시간 내로 배열의 모든 요소에
접근 가능합니다. 각 배열의 요소에는 해당 위치에 대한 인덱스 번호가 주어집니다.

배열 이미지 링크 => https://www.geeksforgeeks.org/array-data-structure/?ref=lbp

배열에 관해 배워야 할 몇 가지 주제는 다음과 같습니다.
 • 배열 역방향  - 배열의 요소를 역방향으로 이동하는 것을 뜻합니다. 예를 들어,
                Input   : arr[] = {1, 2, 3}
                Output  : arr[] = {3, 2, 1}
                와 같이 동작합니다.
                
 • 배열 회전    - 배열 요소를 원형 방식으로 이동하는 것을 뜻합니다. 예를 들어,
                Input   : arr[] = {1, 2, 3, 4, 5}
                Output  : arr[] = {5, 1, 2, 3, 4}
                와 같이 동작합니다.

 • 배열 재배열  - 일부 조건이나 작업에 따라 요소의 초기 순서가 변경 됨을 뜻합니다.

 • 배열 범위 쿼리 - 다양한 요소에 대해 작업을 수행해야 할 때 사용되는 함수를 뜻합니다.
 
 • 다차원 배열  - 둘 이상의 차원을 갖는 배열을 뜻합니다. 가장 많이 사용되는 것은
                행렬이라고도 불리는 2차원 배열입니다.

 • Kadane 알고리즘

 • 네덜란드 국기 알고리즘


2. 문자열 데이터 구조

문자열도 배열의 한 유형입니다. 그러나 문자열의 마지막 문자는 Null 문자로,
문자열의 끝을 의미한다는 점이 특징입니다. 또한, 두 문자열을 연결하기 위해 사용하는
"순차적 연결"( Concatenation ) 등의 고유한 작업이 존재합니다.

문자열 이미지 링크 => https://media.geeksforgeeks.org/wp-content/uploads/20220820132424/Strings.png

문자열에 대해 알아야 할 몇 가지 개념은 다음과 같습니다.
 • 하위 시퀀스 및 하위 문자열 - 