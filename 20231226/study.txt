[[ DSA ( Data Structures and Algorithms ) ]] - References : geeksforgeeks.org

개요 :  DSA( Data Structures and Algorithms )는 완벽히 분류 되어 있지만,
        서로 연관성이 있는 두 토픽인 자료 구조( Data Structures )와 알고리즘( Algorithms )을 일컫습니다.
        DSA는 CS를 배우는 사람들이 필수적으로 익혀야 하는 가장 중요한 요소입니다.

자료 구조 : 데이터를 효율적이고 효과적이게 쓸 수 있도록, 기기에 데이터의 적재와 분류하는 방식을 지칭합니다.
            시간 복잡도와 공간 복잡도를 최소화 하는 것을 자료 구조 사용 전에 선행해야합니다.

알고리즘 :  특정 상황의 문제 해결이나, 계산 등에 사용되는 절차 혹은 잘 정의된 구조들의 집합입니다.
            특정 업무를 해결하는 절차들의 집합이라고 생각하면 되겠습니다.

[[ 학습 과정 ]]

1. 시간 복잡도, 공간 복잡도에 관해 학습한다.
2. 기본 자료 구조를 학습한다.
3. 기본 알고리즘을 학습한다.
4. DSA 문제 풀이를 연습한다.

====================================================================================================

[[ 1. 복잡도 학습하기 ]]

DSA의 발발의 주요 계기인 효율적이고 효과적인 문제 해결을 위해, "시간 복잡도"와 "공간 복잡도"의 개념이 생겼습니다.

1. 시간 복잡도 : 코드 수행에 필요한 시간의 총량을 측정하기 위해 사용합니다.
2. 공간 복잡도 : 코드의 기능들을 성공적으로 수행하기 위해 필요한 공간들의 총량을 지칭합니다.
                또한, 자료 구조 외의 작업 수행에 사용되는 보조 공간( Auxiliary Space )이라는
                용어도 기억해야 할 요소입니다.

이에 더해, 코드 수행에 필요한 시간은 다음과 같은 몇몇 요소들에 의해 좌우됩니다.
 • 프로그램 내에서 실행 되는 작업의 수.
 • 장치의 처리 속도.
 • 데이터 전달 속도.( ex. 온라인 플랫폼에서 코드 수행 등의 상황 )

이런 사항들과 무관하게 효율성을 측정하기 위해, "점근 표기법( Asymptotic Notation )"을 사용합니다.

점근 표기법( Asymptotic Notation )은 코드 수행이 필요하지 않고, 입력 크기에 따른 필요 시간을
측정하는 수학적인 도구입니다.
시스템 의존적인 상수와 관계 없이, 전체 프로그램에서 수행되는 모듈 작업의 개수와 연관성을 가집니다.

다음의 세 가지의 점근 표기법이 대표적으로 사용됩니다.
 • Big O Notation( O ) - 최악의 케이스를 설명할 때 사용합니다.
 • Omega Notation( Ω ) - 최고의 케이스를 설명할 때 사용합니다.
 • Theta Notation( θ ) - 알고리즘의 평균 복잡도를 설명할 때 사용합니다.