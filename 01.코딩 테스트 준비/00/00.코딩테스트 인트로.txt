※ Reference from 유튜브 "개발자 장고"(https://www.youtube.com/@developer_jango)


[[ 코딩 테스트 ]] 

[ 코딩 테스트란? ]
- 제한 시간 안에 문제 풀이. 한 문제당 약 30분이 주어짐.
- 채점 방식 : 입력값 여러 개를 넣어, 모두 오류 없이 정답을 출력하는지 확인.

[ 공부 방법 ]
- 각 알고리즘( 대표적으로 10가지. 추후 서술. ) 이해.
- 알고리즘에 해당하는 기본 문제 및 코드 풀이.
- 반복, 숙달.
- 다른 유사 문제 풀기.( 백준 사이트에 각 알고리즘 별로 문제 제공. 10개 이상씩 풀어 봐야 함. )
    - 하루에 다양한 과목을 돌아가면서 풀기.( 골고루 기억에 남기기 위함. )
    - 한 문제 당 풀이 시간 30분 초과 하지 않기.
    - 틀린 문제 오답 체크 및 복습.
    - 실전처럼 테스트해보기.( 다양한 문제 섞어서 시간 제한을 두어, 자체 테스트. )
    ㄴ 실전 같은 긴장감 준 상태에서 수행해볼 것. 부족하면 카톡 오픈 채팅방/OKKY에서 스터디 구해서 진행.

[ 코딩 테스트 필수 알고리즘 10선 ]
( 이 10가지만 숙달해도, 90% 정도는 풀이 가능...? )
- BFS
- DFS
- 백트래킹
- 시뮬레이션
- 이진 탐색
- Greedy
- DP
- MST
- 다익스트라
- 플로이드

[ 언어 추천 ]
- 파이썬
ㄴ 문자열 다루기 쉬움. 느리지만 제대로 된 알고리즘이면 문제 없음. IDE로는 파이참 추천.

- 개인적으로는 C++이나 자바로 진행하고 싶음. 해당 언어 사용자라는 사실이 메리트가 되는지,
    단순히 알고리즘적 지식만 요하는 시험인지 확인 후 결정하자!!!
    ㄴ C++이 실행 속도 측면이나, STL도 잘 구성되어 있고, CS를 이해하는데 많은 도움이 되므로
        사용하기로 결정! 강좌들은 어떤 개념을 요구하는지와 전체적인 흐름을 파악하는데에만 참고하자!!!


[ 코딩 테스트 풀기 전 Tip ]
- 아이디어 : 문제를 풀기 전, 어떻게 풀어갈 것인지( 어떤 알고리즘과 자료 구조를 사용할 것인지, 등 ) 계획 수립하기.
- 시간 복잡도( Big-O Notation ) : 설계한 방식이 30분 내로 확인까지 가능할 지 생각하기.( 보통, 컴퓨터의 연산 속도는 "2억 개 연산/1초". )
- 자료 구조 선택 : 어떤 자료 구조를 사용할 지 계획.( e.g. 데이터의 범위가 20억이면 signed int 사용을 고려 가능. )

[ 문제 출처 및 환경 ]
- 온라인 저지 :
    백준 ( https://www.acmicpc.net/ ) : 문제 풀이 및 연습.
    프로그래머스 ( https://programmers.co.kr/ ) : 실제 시험 환경 체험.
- IDE에서 작성 후 복사/붙여넣기 불가. → 쌩으로 적는 연습해야 할 듯.
- 디버거 사용 불가. → Console 출력으로 연습.

