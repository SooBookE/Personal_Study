"""
문제명 : 수열
링크 : https://www.acmicpc.net/problem/2559
"""

"""
[투포인터 사용 전]

아이디어 :
- for문으로 각 숫자의 위치에서 K개의 숫자를 더한다.
- 각 작업마다 최대값 갱신.

시간복잡도 :
- for문 : O(N)
- 각 위치에서 K개의 값을 탐색해 합산 : O(K)
- 총 시간복잡도 : O(N*K)
    문제에서 주어진 값 : 2 <= N <= 100,000 && 1 <= K <= N
    N*K == 백억!!  >>>>>>>>>>>>>>>   컴퓨터 초당 연산 수 2억

    → 해당 방식 사용 불가!!!!!!!!!!!!!!! 여기서 투포인터 사용할 생각 필요!!

[투포인터]

아이디어 :
- 처음 K개의 값을 구한다.
- for문 : 마지막 요소에서 다음 인덱스의 값을 더하고, 처음 요소의 인덱스를 뺀다.
- 이 때, 최대값을 갱신한다.

시간복잡도 :
- 숫자의 개수만큼 for문 동작
    → O(2N) { 인덱스 더하고 빼는 작업으로 인해 2N } == O(N) { 사실상 무시 가능한 수준. }
    == O(100,000)    <<<   2억 개   → 사용 가능!

자료구조 :
- 전체 정수 배열 : int[]
    - 해당 문제에서 주어진 요소의 값의 범위 : -100 <= Element <= 100
    - int 자료형의 범위는 20억 안팎이므로, int형 사용 가능!!!
- 합한 수 : int
    - 합한 수의 최대값 : K의 최대값 * 각 요소 값의 최대값 == 100,000 * 100 == 10,000,000(== 1*e7)
    - 1*e7은 int 자료형의 범위 안이므로, int형 사용 가능!!!
- 최대값 저장 변수 : int

→ 파이썬은 변수에 int나 long long, float 등의 자료형을 따로 지정하지 않고, 해당 자료의 값이 바뀌면
    자동으로 자료형이 전환되며 값의 할당 범위가 달라져 자료형을 신경 쓰지 않아도 괜찮다.
→ 그러나 자바나 C언어 계열로 코드 작성 시, 해당 요소가 자료형의 범위 안에 속하는지 확인하고 사용할 것!!!!!
    
"""

"""

아이디어 :
- 투포인터 활용.
- for문으로 처음 K개의 값을 저장.
- 다음 인덱스를 더하고, 이전 인덱스를 뺀다.
- 각 작업마다 최대값 갱신.

시간복잡도 :
- O(N) == O(1*e5)  << 2억
- 사용 가능!

자료구조 :
- 숫자를 저장하는 int형 배열 : int[]
    - 숫자의 최대값 == 100 → int형 사용 가능.
- K개의 값을 저장하는 변수 : int
    - K개 값 합의 최대 : 100 * K == 1*e7 → int형 사용 가능.
- 최대값 저장하는 변수 : int
    - K개 값 합의 최대와 동일하므로, int형 사용 가능.

"""

import sys

input = sys.stdin.readline

N, K = map(int, input().split())
nums = list(map(int, input().split()))

each = 0 # K개를 더해주는 변수.
# K개를 더해주기.
for i in range(K):
    each += nums[i]
maxv = each

# +(다음 인덱스) && -(이전 인덱스)
for i in range(K, N):
    each += nums[i]
    each -= nums[i-K]
    maxv = max(maxv, each)

print(maxv)