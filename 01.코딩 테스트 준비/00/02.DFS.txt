※ Reference from 유튜브 "개발자 장고"(https://www.youtube.com/@developer_jango)


[[ DFS( Depth-First Search, 깊이 우선 탐색 ) ]]

- 풀이 방법은 Stack을 사용하거나, 재귀 함수를 사용한다.
- 그래프 탐색( = 모든 Vertex를 탐색 )은 BFS만으로도 충분히 풀 수 있다.
- DFS 사용의 가장 큰 이유는 재귀 함수를 사용해보기 위해서(?)
- 재귀 함수는 백트래킹에서 중요하게 다뤄지는 기법.
- 따라서, 백트래킹 학습 전에 재귀 함수를 익히기 위해서 BFS 학습.


[[ 재귀 함수 ]]

- 자기 자신을 다시 호출하는 함수.
- DFS, 백트래킹 알고리즘에서 주로 사용.
- 주의 사항
    - 재귀 함수가 종료되는 시점을 "반드시" 명시할 것.
    - 재귀 함수의 깊이가 너무 깊어지면 메모리가 터지는 "Stack Overflow" 현상이 발생.
        - 운영체제에서 각 프로그램에 메모리를 할당.
        - 할당된 메모리 중 프로그램의 함수가 호출된 순서대로 Stack과 같은 형태로 코드 진행.
        - 재귀 함수로 인해 함수 호출 Stack이 넘치는 현상이 "Stack Overflow".





[ 1. 아이디어 ]

- 시작 Vertex와 연결된 Vertex 탐색.
- 탐색한 Vertex에 연결된 Vertex를 탐색하고, 더이상 탐색할 수 없을 때까지 반복.
- 더이상 탐색할 수 없을 때, 상위 Vertex로 돌아와 연결된 다른 Vertex가 있는지 탐색.
- 이를 끝까지 반복.


[ 2. 시간 복잡도 ]

- DFS : O(V+E)
        V : Vertex의 개수   E : Edge의 개수


[ 3. 자료 구조 ]

- 검색할 그래프 : 2차원 배열.
- 방문 여부 확인 : 2차원 배열.
- 알고리즘 수행에 필요한 자료 구조 : 없음.


[ 예제 연습 ]

문제 링크 : https://www.acmicpc.net/problem/2667 ( 문제명 : 단지번호붙이기 )