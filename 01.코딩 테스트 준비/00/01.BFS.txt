※ Reference from 유튜브 "개발자 장고"(https://www.youtube.com/@developer_jango)


[[ 그래프 탐색 ]]

- 그래프 탐색 : 연속적인 Data를 모두 탐색하는 방법.
- 종류 : BFS( Breadth-First Search, 너비 우선 탐색 )
        DFS( Depth-First Search, 깊이 우선 탐색 )
- 각각의 탐색 방식 : 데이터가 트리 구조로 되어 있다고 가정한다면,
        BFS : 시작점에서 가장 가까운 순으로 데이터들을 확인하면서 탐색.
        DFS : 시작점에 연결된 각 종점들까지의 길을 하나씩 확인하면서 탐색.



[[ BFS( Breadth-First Search, 너비 우선 탐색 ) ]]

- 그래프 탐색의 한 방법.
- Vertex( Node ) : 각각의 대상을 지칭하는 객체. 여기서는 각 Data가 Vertex가 됨.
- Edge( Arc ) : Vertex를 사이의 관계를 지칭. 여기서는 Data 사이의 관계를 표현함.

[ 1. 아이디어 ]

- 시작점에 연결된 Vertex( Node ) 찾기.
- 찾은 Vertex를 Queue에 저장.
- Queue에 담겨 있는 가장 오래된 데이터를 출력 후 확인. 이 과정을 반복.

    [ Queue( 대기열 ) ]
    - 자료 구조의 한 종류.
    - 선입선출의 형태를 가지고 있음.( FIFO; First-In, First-Out )
    - BFS 알고리즘에 부합하는 자료 구조.

    [ Stack ]
    - 큐( Queue )와 반대 개념의 자료 구조.
    - 후입선출의 형태를 가지고 있음.( LIFO; Last-In, First-Out )
    - 프링글스 통에 감자칩을 담고, 꺼내는 모습을 연상.
    - DFS 알고리즘에 부합하는 자료 구조.

/*
Note : Vertex를 찾는 작업과 그 Data의 값이 찾고자 하는 값인지 검사하는 건 별개의 내용!
        즉, 알고리즘은 데이터 탐색 후 채우는 일을 하고 있고, 채워지는 자료 구조에서 값을 꺼내 검사하는 작업은 별개로 동작!
        가장 먼저 들어온 값을 꺼내기 위해서 BFS에서 자료 구조를 Queue로 쓰는 것!

        여기서 드는 의문은 알고리즘이 Vertex를 찾아 자료 구조에 담는 역할이라면, DFS도 Queue를 사용하면 되지 않나???
        왜 Stack이 적절한 자료구조라고 하는 걸까???
*/


[ 2. 시간복잡도( Big-O Notation ) ]

    [ Big-O Notation ]
    - 해당 알고리즘에 소요되는 최대 시간을 대략적으로 측정할 수 있는 표기법.

- BFS : O(V+E)
        V : Vertex의 개수   E : Edge의 개수


[ 3. 자료 구조 ]

- 그래프에 관한 자료 구조.
- 방문 여부 확인에 사용되는 자료 구조.( 재방문 금지 차원에서 필요. )
- BFS 알고리즘 실행에 사용되는 Queue.


[ 예제 연습 ]

문제 링크 : https://www.acmicpc.net/problem/1926 ( 문제명 : 그림 )

- 아이디어 : 1에 붙어 있는 1번들을 찾아나가기 → "BFS 사용."
            이중 For문 사용. 값이 "1"이면서 "방문하지 않은" 데이터에 대해 BFS 탐색.
            해당 탐색을 진행하면서 전체 그림 개수, 최대 넓이 출력.